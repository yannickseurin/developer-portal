openapi: 3.0.3
info:
  title: Partner Swap service
  version: "2.0"
paths:
  /crypto-currencies:
    get:
      operationId: getCrypto-currencies
      description: Return a list of supported currencies.
      responses:
        "200":
          description: |
            ### Available crypto currencies
            - "id" : your unique identifier of the currency
            - "type" : possible values : coin, token
            - "blockchain" : ledger's blockchain_name of the blockchain as listed in https://crypto-assets-service.api.ledger.com/v1/coins?output=blockchain_name,chain_id, for evm networks this field may be omitted when chainId is defined.
            - "chainId" : for EVMs only, chain id of the blockchain, 1 for ethereum, 137 for polygon... See https://chainlist.org/
            - "contract" : mapped only if type is token, the contract address of the token.
            blockchain OR chainId should be defined. If chainId is defined, blockchain field is ignored.
          x-summary: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CryptoCurrencies"
              example:
                - id: BTC
                  type: coin
                  blockchain: bitcoin
                - id: USDC
                  type: token
                  blockchain: ethereum
                  chainId: 1
                  contract: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
  /pairs:
    get:
      operationId: getPairs
      description: Return a list of supported pairs.
      responses:
        "200":
          description: Array of supported swap pairs.
          x-summary: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pair"
              example:
                - from: btc
                  to: bat
                  tradeMethod:
                    - fixed
                    - float
                  minSwapAmount: "1"
                  maxSwapAmount: "20"
                - from: bat
                  to: btc
                  tradeMethod:
                    - fixed
                    - float
                  minSwapAmount: "5"
                  maxSwapAmount: "10"
  /quote:
    post:
      operationId: postQuote
      description: Return a quote for a pair and amount.
      requestBody:
        description: Info for generating payload
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/Quote"
      responses:
        "200":
          description: TODO
          x-summary: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuoteResponse"
              example:
                quoteId: "CC14E626-CF1B-4EDA-AF5E-766FFD5A3457"
                amount: "1"
                amountTo: "270.864632"
                providerFees: "0.0001"
                referralFees: "0.0001"
                payoutNetworkFees: "0.0002"
                tradeMethod: "float"
                expiry: "2022-04-04T09:10:51+0000"
                minAmountFrom: "1"
                maxAmountFrom: "3"
                defaultSlippage: "0.1"
                minSlippage: "0.1"
                maxSlippage: "0.3"

        "400":
          description: Minimum/maximum error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorPayload"
              examples:
                FROM_CURRENCY_MINIMUM_AMOUNT_ERROR:
                  summary: FROM_CURRENCY_MINIMUM_AMOUNT_ERROR
                  value:
                    messageKey: FROM_CURRENCY_MINIMUM_AMOUNT_ERROR
                    message: Minimum error. (you can add any usefull field as you want)
                    minSwapAmount: "10"
                TO_CURRENCY_MAXIMUM_AMOUNT_ERROR:
                  summary: TO_CURRENCY_MAXIMUM_AMOUNT_ERROR
                  value:
                    messageKey: TO_CURRENCY_MAXIMUM_AMOUNT_ERROR
                    message: Maximum error. (you can add any usefull field as you want)
                    maxSwapAmount: "10"
        "404":
          description: When the pair is not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorPayload"
              example:
                messageKey: SWAP_PAIR_NOT_FOUND_ERROR
                message: When the pair is not found. (you can add any usefull field as you want)
        "451":
          description: When the user's IP address or currency is in a restricted region.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorPayload"
              examples:
                REGION_RESTRICTED_ERROR:
                  summary: REGION_RESTRICTED_ERROR
                  value:
                    messageKey: REGION_RESTRICTED_ERROR
                    message: When the user's IP address is in a restricted region. (you can add any usefull field as you want)
                CURRENCY_REGION_RESTRICTED_ERROR:
                  summary: CURRENCY_REGION_RESTRICTED_ERROR
                  value:
                    messageKey: CURRENCY_REGION_RESTRICTED_ERROR
                    message: When the user's currency is in a restricted region. (you can add any usefull field as you want)

  /status:
    get:
      operationId: getStatus
      description: Returns the status of a quote / trade being executed.
      parameters:
        - name: swapId
          in: query
          required: true
          schema:
            type: string
          example: 1234
      responses:
        "200":
          description: Status of an executed swap transaction
          x-summary: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
              example:
                status: "PENDING"
                amount: "1.337"
                payinTransactionId: "0xfffffffffffff"
                payoutTransactionId: "0xfffffffffffff"
                providerFees`: "0.0001"
                referralFees`: "0.0001"
                payoutNetworkFees: "0.0002"
  /swap:
    post:
      operationId: postSwap
      description: Generates a secure binary payload for the nano in order to authorize the transaction. The provider should validate consistency between `quoteId` and other inputs (addresses, amounts and currencies).
      requestBody:
        description: Info for generating payload
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/PayloadInfo"
      responses:
        "200":
          description: SwapId with flatten JWS `https://www.rfc-editor.org/rfc/rfc7515#section-7.2.2`
          x-summary: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SwapPayload"
              example:
                swapId: "SWAP-ID-165940"
                payinAddress: "0xa0b86991c627e936c1d19d4a2e90a2ce3606eb48"
                createAt: "2030-05-26T14:13:39"
                providerFees: "0.0001"
                referralFees: "0.0001"
                payoutNetworkFees: "0.0002"
                providerSig:
                  payload: "CgUweGZmZhoFMHhmZmYqBTB4ZmZmOgNCVENCA0JBVEoIMTIwMDAwMDBSCDExNTAwMDAwWhF2ZXJ5IGxvbmd1ZSBub25jZQ=="
                  payload_signature: "MEUCIBRm4PrdgRw0aBwRepuOGGRmR/YPcCoyKNJ7UDjFO030AiEA/VT0anolum0a3X/9lGPeovZHqzeDG9brcUB4zhYmwbs="
        "400":
          description: When the deposit wallet is not available.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorPayload"
              example:
                messageKey: NO_DEPOSIT_WALLET_ERROR
                message: When the deposit wallet is not available. (you can add any usefull field as you want)
        "404":
          description: Not found error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorPayload"
              examples:
                CURRENCY_FROM_NOT_FOUND_ERROR:
                  summary: CURRENCY_FROM_NOT_FOUND_ERROR
                  value:
                    messageKey: CURRENCY_FROM_NOT_FOUND_ERROR
                    message: When the currency from is not found. (you can add any usefull field as you want)
                CURRENCY_TO_NOT_FOUND_ERROR:
                  summary: CURRENCY_TO_NOT_FOUND_ERROR
                  value:
                    messageKey: CURRENCY_TO_NOT_FOUND_ERROR
                    message: When the currency to is not found. (you can add any usefull field as you want)
                SWAP_QUOTE_NOT_FOUND_ERROR:
                  summary: SWAP_QUOTE_NOT_FOUND_ERROR
                  value:
                    messageKey: SWAP_QUOTE_NOT_FOUND_ERROR
                    message: When the swap quote is not found. (you can add any usefull field as you want)
                SWAP_TRANSACTION_NOT_FOUND_ERROR:
                  summary: SWAP_TRANSACTION_NOT_FOUND_ERROR
                  value:
                    messageKey: SWAP_TRANSACTION_NOT_FOUND_ERROR
                    message: When the swap transaction is not found. (you can add any usefull field as you want)
        "451":
          description: When the user's IP address is in a restricted region.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorPayload"
              example:
                messageKey: FROM_CURRENCY_MINIMUM_AMOUNT_ERROR
                message: When the user's IP address is in a restricted region. (you can add any usefull field as you want)

components:
  schemas:
    Coin:
      type: string
    CryptoCurrencies:
      required:
        - id
        - type
        - blockchain
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/CryptoCurrencyType"
        blockchain:
          type: string
        chainId:
          type: integer
          format: int32
        contract:
          type: string
    CryptoCurrencyType:
      oneOf:
        - $ref: "#/components/schemas/Coin"
        - $ref: "#/components/schemas/Token"
    Pair:
      required:
        - from
        - to
        - tradeMethod
        - minSwapAmount
        - maxSwapAmount
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        tradeMethod:
          type: array
          items:
            type: string
            enum:
              - fixed
              - float
        minSwapAmount:
          type: string
        maxSwapAmount:
          type: string
    Quote:
      required:
        - from
        - to
        - amount
      type: object
      properties:
        from:
          type: string
          description: currency id in your system.
          example: "btc"
        to:
          type: string
          description: currency id in your system.
          example: "eth"
        amount:
          type: string
          description: amount requested by the user, without the gas fee.
          example: "1"

    PayloadInfo:
      required:
        - quoteId
        - refundAddress
        - refundAddressExtraId
        - payoutAddress
        - payoutAddressExtraId
        - currencyFrom
        - currencyTo
        - payloadCurrencyFrom
        - payloadCurrencyTo
        - amountToProvider
        - amountToWallet
        - nonce
      type: object
      properties:
        quoteId:
          type: string
          description: previously generated quote id
        refundAddress:
          type: string
          description: user's refund address. This address is generaly the fromAddress.
        refundAddressExtraId:
          type: string
          description: tag or memo (optional).
        payoutAddress:
          type: string
          description: user's payout transaction address.
        payoutAddressExtraId:
          type: string
          description: tag or memo (optional).
        currencyFrom:
          type: string
          description: from currency id, using your identifiers (for checking purpose on your side only).
        currencyTo:
          type: string
          description: to currency id, using you identifiers (for checking purpose on your side only).
        payloadCurrencyFrom:
          type: string
          description: from currency id, using ledger's referencial. This value has to be used for currency_from field in the protobuf payload.
        payloadCurrencyTo:
          type: string
          description: to currency id, using ledger's referencial. This value has to used for currency_to field in the protobuf payload.
        nonce:
          type: string
          description: value to use for `device_transaction_id_ng` field in the protobuf payload. It will be an hex format of the byte array nonce received by the user.
        slippage:
          type: string
          description: Value between 0 to 1 (0.1 => 10%). Maximum difference between the amount the user has seen in his quote and the amount he might finally receive, as a ratio of the quoted amount. Otherwise, the user should be asked for his consent to the new trade or reimbursed in original coin.
    ProviderSig:
      required:
        - payload
        - signature
      type: object
      properties:
        payload:
          type: string
          description: protobuf payload (in a binary format)
        signature:
          type: string
          description: payload signed in a JWS format
    QuoteResponse:
      required:
        - amountTo
        - providerFees
        - referralFees
        - payoutNetworkFees
      type: object
      properties:
        quoteId:
          type: string
          description: quote unique identifier (optional, only required for fixed quotes)
        amount:
          type: string
          description: should be same as the input one (optional, only required for consistency check) (as an input coin floating amount)
        amountTo:
          type: string
          description: estimated output amount that will be sent to user (as an output coin floating amount)
        providerFees:
          type: string
          description: amount, expressed in currencyTo, that is paid to the provider.
        referralFees:
          type: string
          description: amount, expressed in currencyTo, that is paid to Ledger (as a referral fee).
        payoutNetworkFees:
          type: string
          description: estimated gas fees that will be used for the payout transaction (as an output coin floating amount)
        tradeMethod:
          type: string
          enum:
            - fixed
            - float
          description: fixed or float (optional, only required for consistency check)
        expiry:
          type: string
          description: quote expiration timestamp (optional, only required for fixed quotes)
        minAmountFrom:
          type: string
          description: minimum valid `amount` for this pair (optional, only required if amount is too low)
        maxAmountFrom:
          type: string
          description: maximum valid `amount` for this pair (optional, only required if amount is too large)
        defaultSlippage:
          type: string
          description: Value between 0 to 1 (0.1 => 10%). Maximum difference between the amount the user has seen in his quote and the amount he might finally receive, as a ratio of the quoted amount. Otherwise, the user should be asked for his consent to the new trade or reimbursed in original coin.
        minSlippage:
          type: string
          description: Minimum slippage that the user can set. (0.1)
        maxSlippage:
          type: string
          description: Maximum slippage that the user can set. (0.3)
    ErrorPayload:
      type: object
      properties:
        messageKey:
          type: string
          description: Error code
        message:
          type: string
          description: Message description
    ServerError:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Status:
      required:
        - status
        - amount
        - payinTransactionId
        - payoutTransactionId
        - providerFees
        - referralFees
        - payoutNetworkFees
      type: object
      properties:
        quoteId:
          type: string
        status:
          type: string
          enum:
            - FINISHED
            - EXPIRED
            - ON_HOLD
            - PENDING
            - REFUNDED
            - UNKNOWN
        amount:
          type: string
          description: as soon as this information is known, this should contain the final amount transferred to the user in output currency.
        payinTransactionId:
          type: string
          description: as soon as this information is known, this should contain the payin transaction hash.
        payoutTransactionId:
          type: string
          description: as soon as this information is known, this should contain the payout transaction hash.
        providerFees:
          type: string
          description: fees amount that has been paid to the provider.
        referralFees:
          type: string
          description: fees amount that has been paid to Ledger (as a referral fee).
        payoutNetworkFees:
          type: string
          description: gas fees that has been be used for the payout transaction (as an output coin floating amount).
    SwapPayload:
      required:
        - swapId
        - payinAddress
        - createdAt
        - providerFees
        - referralFees
        - payoutNetworkFees
        - providerSig
      type: object
      properties:
        swapId:
          type: string
          description: "provider's id of the ongoing swap transaction. This will be used by Ledger's backend to retrieve the status of user swap transaction. A unique id must be generated each time this endpoint is called, even if called with a same quoteId : quoteId != swapId. This is a swap attempt id and several retries sharing the same quote id might be performed by a user."
        payinAddress:
          type: string
          description: provider's address.
        createdAt:
          type: string
          description: date of creation of the swap payload in ISO-8601 format.
        providerFees:
          type: string
          description: amount, expressed in currencyTo, that is paid to the provider.
        referralFees:
          type: string
          description: amount, expressed in currencyTo, that is paid to Ledger (as a referral fee).
        payoutNetworkFees:
          type: string
          description: estimated gas fees that will be used for the payout transaction (as an output coin floating amount).
        providerSig:
          $ref: "#/components/schemas/ProviderSig"
    Token:
      type: string
